Когда приложения стали разрастаться...
Стоимость серверов стала зашкаливать...
Spring - EJB для бедных.
Он занял очень большое место в экосистеме Java.
Модули проекта Spring хорошо задокументированы.
Они очень хорошо покрыты тестами.
У него большое коммьюнити.
Spring постоянно развивается: в него постоянно вливаются новые технологии.
Пользоваться им становиться всё легче.
Проект Spring Boot избавляет пользователя от ручного конфигурирования всевозможных дополнительных разных частей Spring-a.
Позволяет это делать более-менее в автоматическом режиме, возможно подымая что-то лишнее.
Но в месте с этим, читая документацию, которая хорошо описана, всё это хорошо кастомизируется.

Spring MVC - разбивает приложения на части и управляет связью Web-части с основной логикой приложения.

Spring Data генерирует запросы к базе данных.
Spring, что он нам даёт:
берет POJO-классы - обыкновенные Beans и добавляет к ним метаданные.
Поведение Beans можно описать в XML-файле или с помощью Java-аннотаций в самом бине.
Сначала виртуальная машина создаёт классы, потом Spring их инициализирует определенным образом
и после это отдает их в ваше приложение.

Spring реализует такой паттерн, как Inversion of Control.

Spring поднимаясь , стартуя, он все бины инициализирует
и управляет жизненным циклом бинов.

XMLDefinitionLoader
ApplicationXMLContext
Читаются бины и укладываются в коллекцию типа Map ( id_bean; class_id )
Depenpency Injection -> Spring связывает бины между собой
Spring позволяет читать ресурсы, например
BeanFactory инициализирует бины, обвязывая всевозможной логикой,
далее Spring порождает бины.

Типы бинов: 1) SingletonBean - каждый бин порождается один на весь контейнер.
PrototypeBean - порождаются любое количество бинов на весь контейнер.
RequestBean - создается (генерируется) один экземпляр бина на каждый HTTP-запрос
SessionBean - создаются на каждую HTTP сессию.
GlobalSession - один экземпляр бина на глобальную сессию.
Spring оборачивает бины, которые он создает - в Proxy.
Spring делает обёртку над Beans и запросы идут через ProxyBean. (@Transactional)
В XML файле мы настраиваем Beans.
Мы получаем независимые друг от друга классы, у которых отсутствует связывание,
только на основании интерфейсов.